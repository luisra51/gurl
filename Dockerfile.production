# Production Dockerfile for multi-platform builds
# This file is used by GitHub Actions to build and publish the Docker image

# --- Build Stage ---
FROM golang:1.22-alpine AS builder

# Install git and ca-certificates (needed for go modules)
RUN apk add --no-cache git ca-certificates

WORKDIR /app

# Copy go mod files first for better layer caching
COPY go.mod go.sum* ./

# Download dependencies
RUN go mod download

# Copy all source code
COPY . .

# Tidy modules to ensure consistency
RUN go mod tidy

# Debug: List files to see what's available
RUN ls -la && ls -la cmd/ || echo "cmd directory not found"

# Build the application with optimizations for production
# Create a static binary that works across different architectures
RUN cd cmd/crawler && \
    CGO_ENABLED=0 GOOS=linux \
    go build -a -installsuffix cgo -ldflags="-w -s" \
    -o /app/crawler .

# --- Production Stage ---
FROM alpine:3.18

# Install ca-certificates for HTTPS requests, timezone data, and wget for health checks
RUN apk add --no-cache ca-certificates tzdata wget

# Create non-root user for security
RUN addgroup -g 1001 -S appgroup && \
    adduser -u 1001 -S appuser -G appgroup

WORKDIR /app

# Copy the binary from builder stage
COPY --from=builder /app/crawler ./crawler

# Change ownership to non-root user
RUN chown -R appuser:appgroup /app

# Switch to non-root user
USER appuser

# Expose port
EXPOSE 8080

# Health check
HEALTHCHECK --interval=30s --timeout=3s --start-period=5s --retries=3 \
    CMD wget --no-verbose --tries=1 --spider http://localhost:8080/cache/stats || exit 1

# Set default environment variables
ENV SERVER_HOST=0.0.0.0
ENV SERVER_PORT=8080
ENV CACHE_ENABLED=true
ENV ASYNC_ENABLED=true

# Run the application
CMD ["./crawler"]